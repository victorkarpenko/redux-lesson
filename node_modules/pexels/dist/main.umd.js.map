{"version":3,"file":"main.umd.js","sources":["../src/createFetchWrapper.ts","../src/constants.ts","../src/typeCheckers.ts","../src/generatePhotoEndpoints.ts","../src/generateVideoEndpoints.ts","../src/createClient.ts"],"sourcesContent":["import { Params } from \"./types\";\nimport { photoBaseUrl, videoBaseUrl } from \"./constants\";\n\nexport default function createFetchWrapper(\n  apiKey: string,\n  type: \"photo\" | \"video\"\n) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: apiKey,\n    },\n  };\n\n  const baseUrl = type === \"photo\" ? photoBaseUrl : videoBaseUrl;\n\n  return <T extends Params>(path: string, params?: T) =>\n    fetch(\n      `${baseUrl}/${path}?${stringifyParams(params || {})}`,\n      options\n    ).then((response) => response.json());\n}\n\nfunction stringifyParams<T extends Params>(params: T) {\n  return Object.keys(params)\n    .map((key) => `${key}=${params[key]}`)\n    .join(\"&\");\n}\n","export const photoBaseUrl = \"https://api.pexels.com/v1/\";\nexport const videoBaseUrl = \"https://api.pexels.com/videos/\";\nexport const testApiKey = process.env.API_KEY as string;\n","import { Photos, Videos, ErrorResponse } from \"./types\";\n\n/**\n * A helper function to determine if the object is a valid Photo response\n */\nexport function isPhotos(x: any): x is Photos {\n  return !!(x && x.photos);\n}\n\n/**\n * A helper function to determine if the object is a valid Video response\n */\nexport function isVideos(x: any): x is Videos {\n  return !!(x && x.videos);\n}\n\n/**\n * A helper function to determine if the object was an error response\n */\nexport function isError(x: any): x is ErrorResponse {\n  return !!x.error;\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  Photo,\n  PaginationParams,\n  ErrorResponse,\n  Photos,\n  PhotosWithTotalResults,\n} from \"./types\";\nimport { isPhotos } from \"./typeCheckers\";\n\ntype SearchReturn = PhotosWithTotalResults | ErrorResponse;\ntype CuratedReturn = Photos | ErrorResponse;\ntype ShowReturn = Photo | ErrorResponse;\ntype RandomReturn = Photo | ErrorResponse;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"photo\");\n\n  return {\n    search(\n      params: PaginationParams & { query: string }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    curated(params: PaginationParams = {}): Promise<CuratedReturn> {\n      return fetchWrapper(`/curated`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/photos/${id}`);\n    },\n    async random(): Promise<RandomReturn> {\n      const randomPage = Math.floor(1000 * Math.random());\n      const response = await this.curated({ page: randomPage, per_page: 1 });\n\n      if (isPhotos(response)) {\n        return response.photos[0] as RandomReturn;\n      }\n\n      return response as ErrorResponse;\n    },\n  };\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  PaginationParams,\n  ErrorResponse,\n  Video,\n  Videos,\n  VideoFilterParams,\n} from \"./types\";\n\ntype SearchReturn = Videos | ErrorResponse;\ntype PopularReturn = Videos | ErrorResponse;\ntype ShowReturn = Video;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"video\");\n\n  return {\n    search(\n      params: PaginationParams &\n        VideoFilterParams & {\n          query: string;\n        }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    popular(\n      params: PaginationParams & VideoFilterParams = {}\n    ): Promise<PopularReturn> {\n      return fetchWrapper(`/popular`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/videos/${id}`);\n    },\n  };\n}\n","require(\"isomorphic-fetch\");\n\nimport generatePhotoEndpoints from \"./generatePhotoEndpoints\";\nimport generateVideoEndpoints from \"./generateVideoEndpoints\";\nimport * as typeCheckers from \"./typeCheckers\";\n\nexport default function createClient(apiKey: string) {\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new TypeError(\n      `An ApiKey must be provided when initiating the Pexel's client.`\n    );\n  }\n\n  return {\n    typeCheckers,\n    photos: generatePhotoEndpoints(apiKey),\n    videos: generateVideoEndpoints(apiKey),\n  };\n}\n"],"names":["createFetchWrapper","apiKey","type","options","method","headers","Accept","Content-Type","Authorization","baseUrl","path","params","fetch","Object","keys","map","key","join","stringifyParams","then","response","json","isPhotos","x","photos","process","videos","error","generatePhotoEndpoints","fetchWrapper","search","curated","show","id","random","randomPage","Math","floor","this","page","per_page","popular","require","TypeError","typeCheckers","generateVideoEndpoints"],"mappings":"+LAGwBA,EACtBC,EACAC,GAEA,IAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,mBAChBC,cAAeP,IAIbQ,EAAmB,UAATP,EChBU,6BACA,iCDiB1B,gBAA0BQ,EAAcC,UACtCC,MACKH,MAAWC,MAKpB,SAA2CC,GACzC,OAAOE,OAAOC,KAAKH,GAChBI,IAAI,SAACC,UAAWA,MAAOL,EAAOK,KAC9BC,KAAK,KARkBC,CAAgBP,GAAU,IAChDR,GACAgB,KAAK,SAACC,UAAaA,EAASC,mBEjBlBC,EAASC,GACvB,SAAUA,IAAKA,EAAEC,QDJOC,kDCU1B,SAAyBF,GACvB,SAAUA,IAAKA,EAAEG,0BAMKH,GACtB,QAASA,EAAEI,iBCLWC,EAAuB3B,GAC7C,IAAM4B,EAAe7B,EAAmBC,EAAQ,SAEhD,MAAO,CACL6B,gBACEnB,GAEA,OAAOkB,YAAwBlB,IAEjCoB,iBAAQpB,GACN,gBADMA,IAAAA,EAA2B,IAC1BkB,aAAyBlB,IAElCqB,iBACE,OAAOH,eADFI,KAGDC,0BACEC,EAAaC,KAAKC,MAAM,IAAOD,KAAKF,iCACnBI,KAAKP,QAAQ,CAAEQ,KAAMJ,EAAYK,SAAU,mBAA5DpB,UAEFE,EAASF,GACJA,EAASI,OAAO,GAGlBJ,IApBJ,8CCLeQ,EAAuB3B,GAC7C,IAAM4B,EAAe7B,EAAmBC,EAAQ,SAEhD,MAAO,CACL6B,gBACEnB,GAKA,OAAOkB,YAAwBlB,IAEjC8B,iBACE9B,GAEA,gBAFAA,IAAAA,EAA+C,IAExCkB,aAAyBlB,IAElCqB,iBACE,OAAOH,eADFI,MC9BXS,QAAQ,mCAER,SAIqCzC,GACnC,IAAKA,GAA4B,iBAAXA,EACpB,UAAU0C,4EAKZ,MAAO,CACLC,aAAAA,EACApB,OAAQI,EAAuB3B,GAC/ByB,OAAQmB,EAAuB5C"}